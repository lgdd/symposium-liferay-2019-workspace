/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.training.parts.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.training.parts.model.Manufacturer;
import com.liferay.training.parts.model.ManufacturerModel;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

import org.osgi.annotation.versioning.ProviderType;

/**
 * The base model implementation for the Manufacturer service. Represents a row in the &quot;Inventory_Manufacturer&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>ManufacturerModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ManufacturerImpl}.
 * </p>
 *
 * @author Joe Bloggs
 * @see ManufacturerImpl
 * @generated
 */
@ProviderType
public class ManufacturerModelImpl
	extends BaseModelImpl<Manufacturer> implements ManufacturerModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a manufacturer model instance should use the <code>Manufacturer</code> interface instead.
	 */
	public static final String TABLE_NAME = "Inventory_Manufacturer";

	public static final Object[][] TABLE_COLUMNS = {
		{"manufacturerId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"name", Types.VARCHAR}, {"emailAddress", Types.VARCHAR},
		{"website", Types.VARCHAR}, {"phoneNumber", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"userName", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("manufacturerId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("emailAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("website", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("phoneNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table Inventory_Manufacturer (manufacturerId LONG not null primary key,companyId LONG,groupId LONG,userId LONG,name VARCHAR(75) null,emailAddress VARCHAR(75) null,website VARCHAR(75) null,phoneNumber VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,userName VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP =
		"drop table Inventory_Manufacturer";

	public static final String ORDER_BY_JPQL =
		" ORDER BY manufacturer.name ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY Inventory_Manufacturer.name ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long GROUPID_COLUMN_BITMASK = 1L;

	public static final long NAME_COLUMN_BITMASK = 2L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	public ManufacturerModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _manufacturerId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setManufacturerId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _manufacturerId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Manufacturer.class;
	}

	@Override
	public String getModelClassName() {
		return Manufacturer.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Manufacturer, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Manufacturer, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Manufacturer, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((Manufacturer)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Manufacturer, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Manufacturer, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Manufacturer)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Manufacturer, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Manufacturer, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, Manufacturer>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			Manufacturer.class.getClassLoader(), Manufacturer.class,
			ModelWrapper.class);

		try {
			Constructor<Manufacturer> constructor =
				(Constructor<Manufacturer>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException roe) {
					throw new InternalError(roe);
				}
			};
		}
		catch (NoSuchMethodException nsme) {
			throw new InternalError(nsme);
		}
	}

	private static final Map<String, Function<Manufacturer, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Manufacturer, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Manufacturer, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Manufacturer, Object>>();
		Map<String, BiConsumer<Manufacturer, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Manufacturer, ?>>();

		attributeGetterFunctions.put(
			"manufacturerId", Manufacturer::getManufacturerId);
		attributeSetterBiConsumers.put(
			"manufacturerId",
			(BiConsumer<Manufacturer, Long>)Manufacturer::setManufacturerId);
		attributeGetterFunctions.put("companyId", Manufacturer::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<Manufacturer, Long>)Manufacturer::setCompanyId);
		attributeGetterFunctions.put("groupId", Manufacturer::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<Manufacturer, Long>)Manufacturer::setGroupId);
		attributeGetterFunctions.put("userId", Manufacturer::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<Manufacturer, Long>)Manufacturer::setUserId);
		attributeGetterFunctions.put("name", Manufacturer::getName);
		attributeSetterBiConsumers.put(
			"name", (BiConsumer<Manufacturer, String>)Manufacturer::setName);
		attributeGetterFunctions.put(
			"emailAddress", Manufacturer::getEmailAddress);
		attributeSetterBiConsumers.put(
			"emailAddress",
			(BiConsumer<Manufacturer, String>)Manufacturer::setEmailAddress);
		attributeGetterFunctions.put("website", Manufacturer::getWebsite);
		attributeSetterBiConsumers.put(
			"website",
			(BiConsumer<Manufacturer, String>)Manufacturer::setWebsite);
		attributeGetterFunctions.put(
			"phoneNumber", Manufacturer::getPhoneNumber);
		attributeSetterBiConsumers.put(
			"phoneNumber",
			(BiConsumer<Manufacturer, String>)Manufacturer::setPhoneNumber);
		attributeGetterFunctions.put("createDate", Manufacturer::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<Manufacturer, Date>)Manufacturer::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", Manufacturer::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<Manufacturer, Date>)Manufacturer::setModifiedDate);
		attributeGetterFunctions.put("userName", Manufacturer::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<Manufacturer, String>)Manufacturer::setUserName);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getManufacturerId() {
		return _manufacturerId;
	}

	@Override
	public void setManufacturerId(long manufacturerId) {
		_manufacturerId = manufacturerId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@Override
	public String getName() {
		if (_name == null) {
			return "";
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_columnBitmask = -1L;

		_name = name;
	}

	@Override
	public String getEmailAddress() {
		if (_emailAddress == null) {
			return "";
		}
		else {
			return _emailAddress;
		}
	}

	@Override
	public void setEmailAddress(String emailAddress) {
		_emailAddress = emailAddress;
	}

	@Override
	public String getWebsite() {
		if (_website == null) {
			return "";
		}
		else {
			return _website;
		}
	}

	@Override
	public void setWebsite(String website) {
		_website = website;
	}

	@Override
	public String getPhoneNumber() {
		if (_phoneNumber == null) {
			return "";
		}
		else {
			return _phoneNumber;
		}
	}

	@Override
	public void setPhoneNumber(String phoneNumber) {
		_phoneNumber = phoneNumber;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), Manufacturer.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Manufacturer toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Manufacturer>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ManufacturerImpl manufacturerImpl = new ManufacturerImpl();

		manufacturerImpl.setManufacturerId(getManufacturerId());
		manufacturerImpl.setCompanyId(getCompanyId());
		manufacturerImpl.setGroupId(getGroupId());
		manufacturerImpl.setUserId(getUserId());
		manufacturerImpl.setName(getName());
		manufacturerImpl.setEmailAddress(getEmailAddress());
		manufacturerImpl.setWebsite(getWebsite());
		manufacturerImpl.setPhoneNumber(getPhoneNumber());
		manufacturerImpl.setCreateDate(getCreateDate());
		manufacturerImpl.setModifiedDate(getModifiedDate());
		manufacturerImpl.setUserName(getUserName());

		manufacturerImpl.resetOriginalValues();

		return manufacturerImpl;
	}

	@Override
	public int compareTo(Manufacturer manufacturer) {
		int value = 0;

		value = getName().compareTo(manufacturer.getName());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Manufacturer)) {
			return false;
		}

		Manufacturer manufacturer = (Manufacturer)obj;

		long primaryKey = manufacturer.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		ManufacturerModelImpl manufacturerModelImpl = this;

		manufacturerModelImpl._originalGroupId = manufacturerModelImpl._groupId;

		manufacturerModelImpl._setOriginalGroupId = false;

		manufacturerModelImpl._setModifiedDate = false;

		manufacturerModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Manufacturer> toCacheModel() {
		ManufacturerCacheModel manufacturerCacheModel =
			new ManufacturerCacheModel();

		manufacturerCacheModel.manufacturerId = getManufacturerId();

		manufacturerCacheModel.companyId = getCompanyId();

		manufacturerCacheModel.groupId = getGroupId();

		manufacturerCacheModel.userId = getUserId();

		manufacturerCacheModel.name = getName();

		String name = manufacturerCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			manufacturerCacheModel.name = null;
		}

		manufacturerCacheModel.emailAddress = getEmailAddress();

		String emailAddress = manufacturerCacheModel.emailAddress;

		if ((emailAddress != null) && (emailAddress.length() == 0)) {
			manufacturerCacheModel.emailAddress = null;
		}

		manufacturerCacheModel.website = getWebsite();

		String website = manufacturerCacheModel.website;

		if ((website != null) && (website.length() == 0)) {
			manufacturerCacheModel.website = null;
		}

		manufacturerCacheModel.phoneNumber = getPhoneNumber();

		String phoneNumber = manufacturerCacheModel.phoneNumber;

		if ((phoneNumber != null) && (phoneNumber.length() == 0)) {
			manufacturerCacheModel.phoneNumber = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			manufacturerCacheModel.createDate = createDate.getTime();
		}
		else {
			manufacturerCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			manufacturerCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			manufacturerCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		manufacturerCacheModel.userName = getUserName();

		String userName = manufacturerCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			manufacturerCacheModel.userName = null;
		}

		return manufacturerCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Manufacturer, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Manufacturer, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Manufacturer, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((Manufacturer)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Manufacturer, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Manufacturer, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Manufacturer, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Manufacturer)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Manufacturer>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private long _manufacturerId;
	private long _companyId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _userId;
	private String _name;
	private String _emailAddress;
	private String _website;
	private String _phoneNumber;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _userName;
	private long _columnBitmask;
	private Manufacturer _escapedModel;

}